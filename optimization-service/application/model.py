# -*- coding: utf-8 -*-
"""gurobi_optimization.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cm9UWPYFiatU39XTzSbtbwRk3529BLSw
"""

import pandas as pd
import gurobipy as gp
from gurobipy import GRB

# Load the preferences and distances CSV files without the 'Unnamed: 0' column
preferences = pd.read_csv('preferences.csv', index_col=0)
distances = pd.read_csv('distances.csv', index_col=0)

# Check if the columns are correctly set now
print("Corrected Preferences Columns:", preferences.columns.tolist())
print("Corrected Distances Columns:", distances.columns.tolist())

# Example of a simpler correction in your Gurobi model (adapt as necessary for the full model)
employees = preferences.index.tolist()
offices = preferences.columns.tolist()

# Create a Gurobi model
model = gp.Model('EmployeeOfficeAssignment')

# Decision variables
assignment = model.addVars(employees, offices, vtype=GRB.BINARY, name="Assign")

# Objective: maximize preferences (simplified here for demonstration)
objective = gp.quicksum(assignment[e, o] * preferences.loc[e, o] for e in employees for o in offices)
model.setObjective(objective, GRB.MAXIMIZE)

# Constraints
# Each employee assigned to exactly one office
for e in employees:
    model.addConstr(assignment.sum(e, '*') == 1, name=f"OneOffice_{e}")

# Office capacities (example with each office capacity set to 2)
for o in offices:
    model.addConstr(assignment.sum('*', o) <= 2, name=f"Cap_{o}")

# Optimize the model
model.optimize()

# Print the optimal solution
if model.status == GRB.OPTIMAL:
    solution = model.getAttr('X', assignment)
    for e in employees:
        for o in offices:
            if solution[e, o] > 0.5:
                print(f'{e} is assigned to {o}')